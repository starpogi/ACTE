#!/bin/sh

##
##   AUTO-COMPILE AND TEST ENVIRONMENT
##
##    ACTE
##
##    SHELL SCRIPT
##     DEVELOPED BY JAVIER ONGLAO
##    Boston University College of Engineering
##
##    version 2.1.3
##
##    www.github.com/starpogi/ACTE
##
##    You may modify the variables below to meet your specific needs.
##    You may only modify up until the "DO NOT MODIFY" line.
##

## AUTO-COMPILE ENVIRONMENT
##   -- Define the compiler, and the
##    associated compiler flags (CFLAGS) with it
##   -- Define the array,
##      and then define what should be compiled using the format QUESTIONX
COMPILER=g++
CFLAGS=""
QUESTIONARRAY="1 2 3 4 5 6 7"
QUESTION1="Q1.cpp"
QUESTION2="Q2.cpp"
QUESTION3="Q3.cpp"
QUESTION4="Q4.cpp"
QUESTION5="Q5.cpp"
QUESTION6="Q6.cpp"
QUESTION7="Q7.txt"

## AUTO-GRADER ENVIRONMENT: Use only when there is a specialized script to handle $RESULTSLOG
##    This is OPTIONAL.
USEAUTOGRADER="TRUE"
AUTOGRADERINFO="PHP 5.0"
AUTOGRADEREXECUTE="firefox -new-window http://d1.journeys.com.ph/bash/update.php?f=/home/jtonglao/Work/source/results.txt"

## TESTING ENVIRONMENT
TESTINGINFO="Testing in PHO307 Linux via SSH"
GRADELABEL="Final Exam"
RESULTSLOG="results.txt"

## DIRECTORY DEFINITIONS
##    Grade Dir: Where the students' files are located.
##               Script will recursively compile and test each subfolder in this directory.
##    Source Dir: Where the test parameters and the results file are located.
ROOTDIR=$(pwd)
GRADEDIR="$ROOTDIR/students"
SOURCEDIR="$ROOTDIR/source"

################# DO NOT MODIFY BELOW THIS LINE ########################################

## SHELL-SPECIFIC VARIABLES
STARTDIR=$(pwd)
VERSION="2.1.3"
GPPVERSION=$($COMPILER -dumpversion)

######### CHECK FOLDERS BEFORE PROCEEDING ############################################
######    attempt to inform the user to install the parts ##############################
if [ ! -d $SOURCEDIR ]
then
    mkdir $SOURCEDIR
fi

if [ ! -d $GRADEDIR ]
then
    mkdir $GRADEDIR
fi

## BEGIN GRADING HERE
##     WE WILL DISPLAY THE INFORMATION FIRST
##    THEN PROCEED FURTHER TO GRADE

echo -e "## ##########################################################################"
echo -e "## AUTO-COMPILE AND TEST ENVIRONMENT"
echo -e "##    ACTE "
echo -e "##    Version $VERSION -- Built 2/22/2012 - Engine CROWELL - Platform UNIX"
echo -e "##    Developed by Javier Onglao "
echo -e "##    Developed for EC327 Software Engineering Spring 2012"
echo -e "##    Boston University College of Engineering"
echo -e "##    www.github.com/starpogi/ACTE"
echo -e "## ##########################################################################"
echo -e "\>\>\>"
echo -e "\>\>\>    $GRADELABEL"
echo -e "\>\>\>    $TESTINGINFO"
echo -e "\>\>\>    $COMPILER $GPPVERSION"
echo -e "\>\>\>"
echo -e "///////////////////////////// LEGEND ////////////////////////////////////////"
echo -e ""
echo -e "    [/] Pass        [-] Pass with Warnings        [x] Fail"
echo -e "    "
echo -e "/////////////////////////////////////////////////////////////////////////////"
echo -e ""
echo -e ""

echo -e "## ##########################################################################" > $SOURCEDIR/$RESULTSLOG
echo -e "## AUTO-COMPILE AND TEST ENVIRONMENT                                          "    >> $SOURCEDIR/$RESULTSLOG
echo -e "##    ACTE                                                                       "    >> $SOURCEDIR/$RESULTSLOG
echo -e "##    Version $VERSION -- Built 2/22/2012 - Engine CROWELL - Platform UNIX         "    >> $SOURCEDIR/$RESULTSLOG
echo -e "##    Developed by Javier Onglao                                                   " >> $SOURCEDIR/$RESULTSLOG
echo -e "##    Boston University College of Engineering                                  " >> $SOURCEDIR/$RESULTSLOG
echo -e "##    Developed for EC327 Software Engineering Spring 2012                      " >> $SOURCEDIR/$RESULTSLOG
echo -e "## ##########################################################################" >> $SOURCEDIR/$RESULTSLOG
echo -e "\>\>\>                                                                          " >> $SOURCEDIR/$RESULTSLOG
echo -e "\>\>\>    $GRADELABEL                                                                  " >> $SOURCEDIR/$RESULTSLOG
echo -e "\>\>\>    $TESTINGINFO                                                                " >> $SOURCEDIR/$RESULTSLOG
echo -e "\>\>\>    $COMPILER $GPPVERSION                                                                " >> $SOURCEDIR/$RESULTSLOG
echo -e "\>\>\>                                                                          " >> $SOURCEDIR/$RESULTSLOG
echo -e "///////////////////////////// LEGEND ///////////////////////////////////////////////" >> $SOURCEDIR/$RESULTSLOG
echo -e "                                                                                     " >> $SOURCEDIR/$RESULTSLOG
echo -e "    [/] Pass        [-] Pass with Warnings        [x] Fail                             " >> $SOURCEDIR/$RESULTSLOG
echo -e "                                                                                     " >> $SOURCEDIR/$RESULTSLOG
echo -e "////////////////////////////////////////////////////////////////////////////////////" >> $SOURCEDIR/$RESULTSLOG
echo -e "" >> $SOURCEDIR/$RESULTSLOG
echo -e "" >> $SOURCEDIR/$RESULTSLOG

## Begin Directory Scan
for dir in $GRADEDIR/*; do

    ## Show Directory
    cd $dir
   
    STUDENT=$(pwd)
    echo -e "[ $(echo $dir | awk 'BEGIN {FS="/"} { print $NF }') ]"
    echo -e ""
   
    echo -e "[ STUDENT: $(echo $dir | awk 'BEGIN {FS="/"} { print $NF }') ]" >> $SOURCEDIR/$RESULTSLOG
    echo -e "" >> $SOURCEDIR/$RESULTSLOG
   
    ## Remove traces of executable
    rm -rf q1 q2 q3 q4 q5 q6
   
    ## Run tests for every student
    for j in $QUESTIONARRAY;
    do
        ## Prepare to execute depending on file type
        echo -e "    Question $j"
        echo -e "    Question $j" >> $SOURCEDIR/$RESULTSLOG
       
        if [[ $(eval echo 'QUESTION$j) == *.txt ]]; then
            ## Display Answers
            echo -e "      [/] Display"
            echo -e "        [/] Display" >> $SOURCEDIR/$RESULTSLOG
       
            cat $(eval echo 'QUESTION$j) > $SOURCEDIR/resultstemp.txt
            sed  's/^/            /'  $SOURCEDIR/resultstemp.txt     >> $SOURCEDIR/$RESULTSLOG
        else
            ## Compile Source Code
            $COMPILER $CFLAGS -o q$j $(eval echo 'QUESTION$j) 2> $SOURCEDIR/temp.txt
           
            if [ -x ./q$j ]
            then
                ## Determine if the g++ dumped any warnings via file size
                GFILESIZE=$(ls -lah $SOURCEDIR/temp.txt | awk '{ print $5}')
               
                if [ $GFILESIZE -gt 0 ]
                then
                    echo -e "      [-] Compile"
                    echo -e "        [-] Compile" >> $SOURCEDIR/$RESULTSLOG
                    sed  's/^/            /'  $SOURCEDIR/temp.txt     >> $SOURCEDIR/$RESULTSLOG
                else
                    echo -e "      [/] Compile"
                    echo -e "        [/] Compile" >> $SOURCEDIR/$RESULTSLOG
                fi
               
                ## Perform the Tests
                ## Load up the specific folder in the source and loop through the tests
                if [ -d $SOURCEDIR/q$j ]
                then
                    for testfiles in $SOURCEDIR/q$j/*;
                    do
                       
                        echo -e "      [ ] $(echo $testfiles | awk 'BEGIN {FS="/"} { print $NF }')"
                        echo -e "        [ ] $(echo $testfiles | awk 'BEGIN {FS="/"} { print $NF }')" >> $SOURCEDIR/$RESULTSLOG
                       
                        # Run in the background, run for a second, then kill the process
                        ./q$j < /$testfiles > $SOURCEDIR/resultstemp.txt > 2&1 &
                        sleep 1
                        killall q$j 2>&1 | tee $SOURCEDIR/killlog.txt
                       
                        sed  's/^/            /'  $SOURCEDIR/resultstemp.txt     >> $SOURCEDIR/$RESULTSLOG
                       
                    done
                else
                    echo -e "      [ ] Run"
                    echo -e "        [ ] Run" >> $SOURCEDIR/$RESULTSLOG
               
                    ./q$j > $SOURCEDIR/resultstemp.txt 2>&1 &
                    sleep 1
                    killall q$j >> $SOURCEDIR/killlog.txt 2>&1
                   
                    sed  's/^/            /'  $SOURCEDIR/resultstemp.txt     >> $SOURCEDIR/$RESULTSLOG
                fi
            else
                echo -e "      [x] Compile"
                echo -e "        [x] Compile" >> $SOURCEDIR/$RESULTSLOG
                sed  's/^/            /'  $SOURCEDIR/temp.txt     >> $SOURCEDIR/$RESULTSLOG
            fi
        fi
        echo ""
        echo "" >> $SOURCEDIR/$RESULTSLOG
    done
   
    echo ""
    echo "" >> $SOURCEDIR/$RESULTSLOG
    echo "/////////////////////////////////////////////////////////////////"
    #echo "/////////////////////////////////////////////////////////////////" >> $SOURCEDIR/$RESULTSLOG
    cd ..
done

echo -e "\>\>\>"
echo -e "\>\>\> Shell kill"
echo -e "\>\>\>"
#echo -e "\>\>\>" >> $SOURCEDIR/$RESULTSLOG
#echo -e "\>\>\> Shell kill" >> $SOURCEDIR/$RESULTSLOG
#echo -e "\>\>\>" >> $SOURCEDIR/$RESULTSLOG

## Garbage Handling and collection
if [ -e $SOURCEDIR/temp.txt ]; then
   rm $SOURCEDIR/temp.txt
fi

if [ -e $SOURCEDIR/resultstemp.txt ]; then
   rm $SOURCEDIR/resultstemp.txt
fi

if [ "$USEAUTOGRADER" == "TRUE" ]; then
    echo "//////////////////////////////////////////////"
    sleep 1
    echo "BEGIN AUTOGRADE"
    echo " ---> Transferring log file to PHP Parser"
    eval $AUTOGRADEREXECUTE
    echo " ---> Transfer complete"
fi


## Return to starting directory
cd $STARTDIR

echo ""
echo "Done"
echo ""
